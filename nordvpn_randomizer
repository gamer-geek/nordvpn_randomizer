#!/bin/bash
#
#title          :nordvpn_randomizer
#description    :randomizes NordVPN's UDP files based on
#               :country (user input) and adds auth.txt
#               :so login happens automatically.
#author         :Damian Rath
#created        :2018-06-30
#version        :0.8
#usage          :bash nordvpn_randomizer
#notes          :script expects /etc/openvpn/auth.txt to
#               :exist containing valid user & password.
#bash_version   :4.3.48(1)-release


# This will let the script know where it's located even
# if run in cron or symlinked.
scriptDir=$(dirname $(readlink -f $0))

declare -A results
declare -a fastServers
rServer=""
vpnExist=""
vpnIP=""
VPNCOUNTRIES=("ar" "at" "au" "az" "ba" "be" "bg" "br" "ca" "ch" "cl" "cy" "cz" "de" "dk" "ee" "es" "fi" "fr" "ge" "hk" "hr" "hu" "id" "ie" "il" "in" "is" "it" "jp" "kr" "lu" "lv" "md" "mk" "mx" "my" "nl" "no" "nz" "pl" "pt" "ro" "rs" "ru" "se" "sg" "si" "sk" "tr" "tw" "uk" "us" "vn" "za")
mySelect=""
cwd=$(pwd)
CAPACITY=70         # Servers with 70% capacity left
THRESHOLD=30        # Latency threshold: Below 30ms
myIndex=0


# Unset this string to disable logging
LOGFILE="$scriptDir/nordvpn_randomizer.log"


if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

type jq >/dev/null 2>&1 || { 2>&1 echo "Missing dependency: This script requires jq 1.5"; exit 1; }

function checkOpenvpn() {
    openvpnRunning=$(ps auxf | grep -i "openvpn" | fgrep -v grep)
    echo "($openvpnRunning)"
    echo

    return
}

function killOpenvpn() {
    killall openvpn
    sleep 5

    return
}

function viewLog() {
    echo
    tail -10 $scriptDir/nordvpn_randomizer.log
    echo

    return
}


function serverLoad() {
    local pingOut=""
    local size=0
    local capacity=0
    local location=""

    nordServers=$(curl --silent https://nordvpn.com/api/server/stats)

    while IFS="=" read -r key value
    do
        results[$key]="$value"
    done < <(jq --compact-output -r --arg location $mySelect --arg capacity $CAPACITY \
            '[. |
            to_entries[] |
            {key: .key, value: .value.percent} |
            select(.value > ($capacity|tonumber)) |
            select(.key|contains($location))] |
            sort_by(-.value) |
            from_entries |
            to_entries |
            map("\(.key)=\(.value|tostring)") |
            .[]' <<<"$nordServers")

    for key in "${!results[@]}"
    do
        pingOut=$(ping -w 2 -c 1 -q $key | tail -n2 | awk -F '/' 'END {print $5}')

        if [[ "$pingOut" < "$THRESHOLD" ]]; then
            fastServers[$myIndex]=$key
#            echo "$pingOut / $key"
        fi
        ((myIndex++))
    done

    size=${#fastServers[@]}
    myIndex=$(($RANDOM % $size))

    if [ ! ${fastServers[$myIndex]} ]; then
        echo "[$(who am i | awk -F' ' '{print $1}')][$(date)] No server matching your critera could be found" >> $LOGFILE
        exit 1
    else
        rServer="${fastServers[$myIndex]}.udp.ovpn"
    fi

#    echo "$rServer"

    return
}


# Parse all command line parameters
while [[ $# -gt 0 ]]
do
    key="$1"
    case "$key" in
        -a|--add)
            shift
            mySelect="$1"
        ;;
        -k|--kill)
            killOpenvpn
        ;;
        -f|--fastest)
            serverLoad
        ;;
        -l|--log)
            logview="true"
        ;;
        -h|--help)
            echo
            echo "No parameters             = menu mode"
            echo
            echo "-a|--add <country-code>   = add a randomized VPN"
            echo
            echo "-k|--kill                 = kill all OpenVPN processes"
            echo
            echo "-f|--fastest              = find the fastest"
            echo
            echo "-l|--log              = show the log after connection"
            echo
            echo "-h|--help                 = this help"
            echo
            echo "Valid country-codes are: ${VPNCOUNTRIES[*]}"
            echo
            exit 0
        ;;        
        *)
            echo "Unknown option '$key'"
            exit 1
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done


cd /etc/openvpn/ovpn_udp

if [ ! $rServer ]; then
    # --fastest is not set so we pick a file the oldfashioned way.
    rServer=$(shuf -ezn 1 $mySelect*udp* | xargs -0 -n1 echo)
fi

# Find the string 'auth-user-pass' in the choosen file and add
# '/etc/openvpn/auth.txt' at the end of it unless it already exists.
grep -q "auth.txt" $rServer
if [[ ! $? -eq 0 ]]; then
    sed -i 's/auth-user-pass/& \/etc\/openvpn\/auth.txt/' $rServer
fi

# Forking the start of OpenVPN.
/bin/bash -c "openvpn $rServer >/dev/null 2>&1 &"

# Wait a few seconds to have the openvpn process above fully initialize.
# Use a number (seconds) that works for your system.
sleep 5

# Ask Google what my new IP is after the VPN has been initialized.
vpnIP=$(dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{print $2}')

if [ ! -f $LOGFILE ]; then
    touch $LOGFILE
    chmod 0600 $LOGFILE
fi

echo "[$(who am i | awk -F' ' '{print $1}')][$(date)] $rServer ($vpnIP)" >> $LOGFILE

if [ $logview ]; then
    viewLog
    checkOpenvpn
fi

cd $cwd

exit 0
