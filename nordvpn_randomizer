#!/bin/bash
#
#title          :nordvpn_randomizer
#description    :randomizes NordVPN's UDP files based on
#               :country (user input) and adds auth.txt
#               :so login happens automatically.
#author         :Damian Rath
#created        :2018-06-30
#version        :0.7
#usage          :bash nordvpn_randomizer
#notes          :script expects /etc/openvpn/auth.txt to
#               :exist containing valid user & password.
#bash_version   :4.3.48(1)-release


# This will let the script know where it's located even
# if run in cron or symlinked.
scriptDir=$(dirname $(readlink -f $0))

rServer=""
vpnExist=""
vpnIP=""
VPNCOUNTRIES=("ar" "at" "au" "az" "ba" "be" "bg" "br" "ca" "ch" "cl" "cy" "cz" "de" "dk" "ee" "es" "fi" "fr" "ge" "hk" "hr" "hu" "id" "ie" "il" "in" "is" "it" "jp" "kr" "lu" "lv" "md" "mk" "mx" "my" "nl" "no" "nz" "pl" "pt" "ro" "rs" "ru" "se" "sg" "si" "sk" "tr" "tw" "uk" "us" "vn" "za")
mySelect=""
myItem=""
item=""
cli=""
cwd=$(pwd)

# Unset this string to disable logging
LOGFILE="$scriptDir/nordvpn_randomizer.log"


if [ "$(id -u)" != "0" ]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi


function checkOpenvpn() {
    for pid in $(pidof -x openvpn)
    do
        if [ $pid != $$ ]; then
            echo
            echo "OpenVPN process is already running with PID $pid"
            echo
            exit 1
        fi
    done

    return
}

function killOpenvpn() {
    killall openvpn
    sleep 5

    if [ ! $cli ]; then
        echo
        echo "All OpenVPN processes killed."
        echo
    fi

    return
}

function udpPinger() {
    local DIR="/etc/openvpn/ovpn_udp"
    local PREFIX="nl"
    local PROTO="UDP"
    local verbose="1"
    local PRERR=0

    if [ "$QNPROTO" == "UDP" ]; then
        QPROTO="1194"
    else
        QPROTO="443"
    fi

    if [ ! $verbose ]; then
        echo "Protocol: $QPROTO"
    fi
    if [ "$verbose" ] ; then
        echo "ovpn file                                          protocol           average  timeout"
    fi


    for F in "$DIR"/"$PREFIX"*.ovpn
    do
        [ ! -e $F ] && echo -e 'Please give a valid path to where you downloaded ovpn files.\n(Try "-w" to automatically download them first or "-h" for help.)' && exit 1
        LIN=`grep "remote " $F`
#        PROTO=`echo $LIN | cut -d' ' -f3`
#        if [ "$PROTO" != "$QPROTO" ]; then
#            continue
#        fi
        IP=`echo $LIN | cut -d' ' -f2`
        DL=`ping -c3 -q $IP | tail -n2`

        if grep "100% packet loss" <(echo $DL) > /dev/null ; then
            TI="3000.33"
        else
            TI=`echo $DL | cut -d'/' -f5`
        fi

        if [ "$verbose" -gt "0" ]; then
            # formatted output
            PFI=`printf '%-50s' "$F"`
            PIP=`printf '%-18s' "$IP"`
            PAV=`printf '%-7s' $TI`

            echo -en "$PFI $PIP $PAV"
            if [ "$PRERR" -eq "1" ]; then
                >&2 echo -en "$PFI $PIP $PAV"
            fi
            if [ "$PAV" == "3000.33" ] ; then
                echo -n "  error"
                if [ "$PRERR" -eq "1" ]; then
                    >&2 echo -n "  error"
                fi
            fi
        else
            echo -en "$F \t $IP \t $TI"
            if [ "$PRERR" -eq "1" ]; then
                >&2 echo -en "$F \t $IP \t $TI"
            fi
            if [ "$TI" == "3000.33" ] ; then
                echo -en " \t error"
                if [ "$PRERR" -eq "1" ]; then
                    >&2 echo -en " \t error"
                fi
            fi
        fi
        echo
        if [ "$PRERR" -eq "1" ]; then
            >&2 echo
        fi
    done    
}

udpPinger
exit 0


# Parse all command line parameters, if any.
while [[ $# -gt 0 ]]
do
    key="$1"
    case "$key" in
        -a|--add)
            shift
            mySelect="$1"
            cli="true"
        ;;
        -k|--kill)
            cli="true"
            killOpenvpn
        ;;
        -h|--help)
            cli="true"
            echo
            echo "No parameters             = menu mode"
            echo
            echo "-a|--add <country-code>   = add a randomized VPN"
            echo
            echo "-k|--kill                 = kill all OpenVPN processes"
            echo
            echo "-h|--help                 = this help"
            echo
            exit 0
        ;;        
        *)
            echo "Unknown option '$key'"
            exit 1
        ;;
    esac
    # Shift after checking all the cases to get the next option
    shift
done


if [ ! $cli ]; then
    checkOpenvpn
fi

if [ ! $cli ]; then
    # Keep asking for a valid country-code until the user gets it right
    while ! [ "${myItem}" ]; do
        clear

        echo
        echo "NordVPN random server picker"
        echo "=================================================================="

        # Ask user to provide a country-code for the random server choice
        echo
        echo "Please enter valid country-code you want to use for random server"
        read -p ">" mySelect

        # Check to see that the user input actually is a country-code
        # that NordVPN has a VPN server at.
        for item in "${VPNCOUNTRIES[@]}"; do
            if [[ $mySelect == "$item" ]]; then
                myItem="true"
            fi
        done
        if [[ ! $myItem ]]; then
            echo
            echo "NordVPN does not support that country. Please try again."
            echo
            echo "Valid country-codes are: ${VPNCOUNTRIES[*]}"
            echo
            read -sn 1 -p "Press any key to continue..."
        fi
    done
fi


# Ok, we now have a valid country-code. Time to start the OpenVPN server.
cd /etc/openvpn/ovpn_udp

# Pick a random file we need
rServer=$(shuf -ezn 1 $mySelect*udp* | xargs -0 -n1 echo)

if [ ! $cli ]; then
    echo
    echo "Random server is: $rServer"
    echo
    echo "Standby..."
fi

# Find the string 'auth-user-pass' in the choosen file and add
# '/etc/openvpn/auth.txt' at the end of it unless it already exists.
grep -q "auth.txt" $rServer
if [[ ! $? -eq 0 ]]; then
    sed -i 's/auth-user-pass/& \/etc\/openvpn\/auth.txt/' $rServer
fi

# Forking the start of OpenVPN.
/bin/bash -c "openvpn $rServer >/dev/null 2>&1 &"

# Wait a few seconds to have the openvpn process above fully initialize.
# Use a number (seconds) that works for your system.
sleep 5

# Ask Google what my new IP is after the VPN has been initialized.
vpnIP=$(dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'"' '{print $2}')

if [ $LOGFILE ]; then
    if [ ! -f $LOGFILE ]; then
        touch $LOGFILE
        chmod 0600 $LOGFILE
    fi

    echo "[$(who am i | awk -F' ' '{print $1}')][$(date)] $rServer ($vpnIP)" >> $LOGFILE
fi

if [ ! $cli ]; then
    echo
    echo "My new IP is: $vpnIP"
    echo
fi

cd $cwd

exit 0
